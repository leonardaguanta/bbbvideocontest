<?php
/*
Plugin Name: Simple Vote Me
Plugin URI: https://wordpress.org/plugins/simple-vote-me/
Description: This plugin add cute and simple votes for Wordpress post.
Author: Gonzalo Torreras
Version: 100
Author URI: http://www.gonzalotorreras.com
*/
define('SIMPLEVOTEMESURL', WP_PLUGIN_URL . "/" . dirname(plugin_basename(__FILE__)));
include_once (plugin_dir_path(__FILE__) . '/admin.php');

include_once (plugin_dir_path(__FILE__) . '/widget.php');

global $gt_simplevoteme_version;
$gt_simplevoteme_version = "1.3";

function gt_simplevoteme_checkversion()
	{
	$version = get_option('gt_simplevoteme_version');
	if ($version === false)
		{

		// install plugin
		// check if there are old system of votes

		gt_simplevoteme_check_old_votes();
		}
	  else
	if ($version != $gt_simplevoteme_version)
		{

		// update tables,vars etc.

		}

	update_option('gt_simplevoteme_version', $gt_simplevoteme_version);
	}

add_action('plugins_loaded', 'gt_simplevoteme_checkversion');

function gt_simplevoteme_check_old_votes()
	{
	$posts = get_posts('meta_key=_simplevotemetotal&amp;');
	if ($posts)
		{
		$votes = array(
			'positives' => array() ,
			'negatives' => array() ,
			'neutrals' => array()
		);
		foreach($posts as $post)
			{
			$pos = get_post_meta($post->ID, '_simplevotemepositive', true) ? get_post_meta($post->ID, '_simplevotemepositive', true) : 0;
			$neg = get_post_meta($post->ID, '_simplevotemenegative', true) ? get_post_meta($post->ID, '_simplevotemenegative', true) : 0;
			$neu = get_post_meta($post->ID, '_simplevotemeneutral', true) ? get_post_meta($post->ID, '_simplevotemeneutral', true) : 0;
			for ($i = 0; $i < $pos; $i++)
				{
				$votes['positives'][] = '0'; //add votes for positive with user_ID 0 like annonymous
				}

			for ($i = 0; $i < $neg; $i++)
				{
				$votes['negatives'][] = '0'; //add votes for positive with user_ID 0 like annonymous
				}

			for ($i = 0; $i < $neu; $i++)
				{
				$votes['neutrals'][] = '0'; //add votes for positive with user_ID 0 like annonymous
				}

			update_post_meta($post->ID, '_simplevotemevotes', $votes);

			// echo "updating gt_svtm</br>neg:$neg</br>pos:$pos</br>neu:$neu";
			// print_r($votes);

			delete_post_meta($post->ID, '_simplevotemetotal', "");
			delete_post_meta($post->ID, '_simplevotemepositive', "");
			delete_post_meta($post->ID, '_simplevotemenegative', "");
			delete_post_meta($post->ID, '_simplevotemeneutral', "");
			}
		}
	}

function gt_simplevoteme_enqueuescripts()
	{
	wp_register_style('simplevotemestyle', SIMPLEVOTEMESURL . '/css/simplevoteme.css');
	wp_register_style('simplevotemestyleadmin', SIMPLEVOTEMESURL . '/css/simplevotemeadmin.css');
	wp_enqueue_script('gtsimplevoteme', SIMPLEVOTEMESURL . '/js/simple-vote-me.js', array(
		'jquery'
	));
	wp_localize_script('gtsimplevoteme', 'gtsimplevotemeajax', array(
		'ajaxurl' => admin_url('admin-ajax.php')
	));
	$css = get_option('gt_simplevoteme_custom_default_css');
	if (!$css) //default = yes = 0
	wp_enqueue_style('simplevotemestyle');
	}

add_action('wp_enqueue_scripts', 'gt_simplevoteme_enqueuescripts');

function gt_simplevoteme_getimgvote($type)
	{
	/*$custom = get_option('gt_simplevoteme_custom_img');
	if(!$custom){
	return "<img src='". SIMPLEVOTEMESURL ."/img/$type.png'/>";
	} else{
	$customImg = get_option("gt_simplevoteme_custom_img_$type");
	return "<img src='$customImg'/>";
	}*/
	// return "<img src='http://platypus-dallas.s3.amazonaws.com/wp-content/uploads/2015/11/11223604/afterVote.png'/>";
    return "<i class='fa fa-heart' aria-hidden='true'></i>";
	}

function gt_simplevoteme_getvotelink($noLinks = false, $tipo = 'h', $postVideo_ID = '')
	{
	$votemelink = "";
	$user_ID = get_current_user_id();
	if (!empty($_SERVER['HTTP_CLIENT_IP']))
		{
		$user_IP = $_SERVER['HTTP_CLIENT_IP'];
		}
	elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR']))
		{
		$user_IP = $_SERVER['HTTP_X_FORWARDED_FOR'];
		}
	  else
		{
		$user_IP = $_SERVER['REMOTE_ADDR'];
		}

	$limitVotesPerUser = get_option('gt_simplevoteme_votes');
	if (!$postVideo_ID)
		{
		if (!$noLinks)
			{
			$post_ID = get_the_ID();
			}
		  else
			{
			if (!$_POST['postvideoid'])
				{
				$post_ID = $_POST['postid'];
				}
			  else
				{
				$post_ID = $_POST['postvideoid'];
				}
			}
		}
	  else
		{
		$post_ID = $postVideo_ID;
		}

	$votes = get_post_meta($post_ID, '_simplevotemevotes', true) != "" ? get_post_meta($post_ID, '_simplevotemevotes', true) : array(
		'positives' => array() , //id users array
		'negatives' => array() ,
		'neutrals' => array() ,
	);
	$ipDate = get_post_meta($post_ID, '_simplevotedate', true) != "" ? get_post_meta($post_ID, '_simplevotedate', true) : date("Y-m-d");
	$ipVotes = get_post_meta($post_ID, '_simplevoteIP', true) != "" ? get_post_meta($post_ID, '_simplevoteIP', true) : array(
		'positives' => array()
	);
	if ($ipDate != date("Y-m-d"))
		{
		$ipVotes = array(
			'positives' => array()
		);
		$ipDate = date("Y-m-d");
		update_post_meta($post_ID, '_simplevotedate', $votes);
		$ipVotes = array(
			'positives' => array()
		);
		$noLinks = 0;
		}

	// if no limit votes per user or user not logged

	if (!filter_var($user_IP, FILTER_VALIDATE_IP) === false)
		{
		if ((in_array($user_IP, $ipVotes['positives'])))
			{
			// scottw comment out
			//$counts = array_count_values($ipVotes['positives']);
			//if ($counts[$user_IP] >= 5)
			//	{
			//	$noLinks = 1; //check if there are limit per user and the user is in array, if is $nolinks = 1
			//	}
			//  else
			//	{
				$noLinks = 0;
			//	}
			}
		}
	  else
		{
		$noLinks = 0;
		}

	$votemePositive = count($votes['positives']);
	$votemeNeutral = count($votes['neutrals']);
	$votemeNegative = count($votes['negatives']);
	$votemeTotal = sizeof($votes, 1) - 3; //rest 3 because arrays for separate votes counts.
	$votemeResults = get_option('gt_simplevoteme_results');
	$votemeResultsType = get_option('gt_simplevoteme_results_type');
	if ($votemeResults)
		{
		if ($votemeResults == 1 || ($votemeResults == 2 && $noLinks))
			{
			if ($votemeTotal != 0 || $votemeTotal != '')
				{
				if ($votemeNegative > 0) //if there are votes
				$percentNegative = round($votemeNegative / $votemeTotal, 2) * 100 . "%";
				  else $percentNegative = "0%";
				if ($votemeResultsType == 2) //just total votes
				$votemePercentNegative = $votemeNegative;
				  else
				if ($votemeResultsType == 1) //only percentages
				$votemePercentNegative = $percentNegative;
				  else

				// all

				$votemePercentNegative = "$percentNegative<small> ($votemeNegative) </small>";
				if ($votemeNeutral > 0) //if there are votes
				$percentNeutral = round($votemeNeutral / $votemeTotal, 2) * 100 . "%";
				  else $percentNeutral = "0%";
				if ($votemeResultsType == 2) //just total votes
				$votemePercentNeutral = $votemeNeutral;
				  else
				if ($votemeResultsType == 1) //only percentages
				$votemePercentNeutral = $percentNeutral;
				  else

				// all

				$votemePercentNeutral = "$votemeNeutral";
				if ($votemePositive > 0) $percentPositive = round($votemePositive / $votemeTotal, 2) * 100 . "%";
				  else $percentPositive = "0%";
				if ($votemeResultsType == 2) //just total votes
				$votemePercentPositive = $votemePositive;
				  else
				if ($votemeResultsType == 1) //only percentages
				$votemePercentPositive = $percentPositive;
				  else

				// all

				$votemePercentPositive = "$votemePositive";
				}
			  else
				{
				$votemePercentNegative = "";
				$votemePercentNeutral = "";
				$votemePercentPositive = "";
				}
			}
		  else
			{
			$votemePercentNegative = "";
			$votemePercentNeutral = "";
			$votemePercentPositive = "";
			}
		}
	  else
		{
		$votemePercentNegative = "";
		$votemePercentNeutral = "";
		$votemePercentPositive = "";
		}
		
	$votes_off = et_get_option('divi_turn_off_votes');

	if (!$noLinks)
		{
			if($votes_off == "on"){
				$linkPositivo = gt_simplevoteme_getimgvote("good");
			}else{
				$linkPositivo = '<a class="'. $votes_off .'" onclick="simplevotemeaddvote(event,' . $post_ID . ', 1,' . $user_ID . ');">' . gt_simplevoteme_getimgvote("good") . '</a>';
			}
		}
	  else
		{
		$linkPositivo = gt_simplevoteme_getimgvote("good");
		}

	/*    $linkNegativo = '<a onclick="simplevotemeaddvote('.$post_ID.', 2,'.$user_ID.');">'. gt_simplevoteme_getimgvote("bad") .'</a>';
	$linkNeutral  = '<a onclick="simplevotemeaddvote('.$post_ID.', 0,'.$user_ID.');">'. gt_simplevoteme_getimgvote("neutral") .'</a>';
	} else{
	$linkPositivo = gt_simplevoteme_getimgvote("good");
	$linkNegativo = gt_simplevoteme_getimgvote("bad");
	$linkNeutral  = gt_simplevoteme_getimgvote("neutral");
	}*/
	$title = get_option('gt_simplevoteme_title');
	$votemelink = "<div class='simplevotemeWrapper $tipo' id='simplevoteme-$post_ID' >$title";

	// $votemelink .= "<span class='bad'>$linkNegativo <span class='result'>$votemePercentNegative</span></span>";
	// $votemelink .= "<span class='neutro'>$linkNeutral <span class='result'>$votemePercentNeutral</span></span>";
	// $votemelink .= "<span class='good'>$linkPositivo <span class='result'>$votemePercentPositive</span></span>";
	$votemelink .= "<span class='". ($noLinks ? 'no-link' : '') ."'>$linkPositivo <span class='result'>$votemePercentPositive</span></span>";

	// $votemelink.= "<span><span class='result'>$votemePercentPositive</span></span>";
	$votemelink.= "</div>";

	// $votemelink .= "<br />".print_r($votes,true)."<br />";

	$result = $votemelink;
	$css = get_option('gt_simplevoteme_custom_css');
	if ($css) $result.= "<style>" . $css . "</style>";
	$bor_G = get_option('gt_simplevoteme_custom_border_good');
	$bor_N = get_option('gt_simplevoteme_custom_border_neutral');
	$bor_B = get_option('gt_simplevoteme_custom_border_bad');
	$bg_B = get_option('gt_simplevoteme_custom_background_bad');
	$bg_N = get_option('gt_simplevoteme_custom_background_neutral');
	$bg_G = get_option('gt_simplevoteme_custom_background_good');
	if ($bor_G || $bor_N || $bor_B || $bg_G || $bg_N || $bg_B) $result.= "<style>.simplevotemeWrapper span.bad{  background: rgba($bg_B);border:1px solid rgba($bor_B);.simplevotemeWrapper span.neutro{  background: rgba($bg_N);border:1px solid rgba($bor_N);.simplevotemeWrapper span.good{  background: rgba($bg_G);border:1px solid rgba($bor_G);}</style>";

	// $result .= print_r($votes);

	return $result;
	}

function gt_simplevoteme_printvotelink_auto($content)
	{
	$home = get_option('gt_simplevoteme_auto_insert_home');
	$auto = get_option('gt_simplevoteme_auto_insert_content');
	if (!$auto && (is_home() && !$home)) return ($content);
	$login = get_option('gt_simplevoteme_only_login'); //after auto, do not waste resources if is not necessary :)
	if ($login && !is_user_logged_in()) return ($content);
	$position = get_option('gt_simplevoteme_position'); //after login, do not waste resources if is not necessary :)
	if (is_home() && $home)
		{ //if is home and home is active
		if (!$position) return $content . gt_simplevoteme_getvotelink();
		  else
		if ($position == 1) return gt_simplevoteme_getvotelink() . $content;
		  else
		if ($position == 2)
			{
			$linksVote = gt_simplevoteme_getvotelink(); //launch just once
			return $linksVote . $content . $linksVote;
			}
		  else return $content; //nothing expected
		}
	  else
	if (($auto == 1 || $auto == 3) && is_single())
		{ //if is only post(1) or post&page(3)
		if (!$position) return $content . gt_simplevoteme_getvotelink();
		  else
		if ($position == 1) return gt_simplevoteme_getvotelink() . $content;
		  else
		if ($position == 2)
			{
			$linksVote = gt_simplevoteme_getvotelink(); //launch just once
			return $linksVote . $content . $linksVote;
			}
		  else return $content; //nothing expected
		}
	  else
	if (($auto == 2 || $auto == 3) && is_page())
		{ //if is only page(2) or post&page(3)
		if (!$position) return $content . gt_simplevoteme_getvotelink();
		  else
		if ($position == 1) return gt_simplevoteme_getvotelink() . $content;
		  else
		if ($position == 3)
			{
			$linksVote = gt_simplevoteme_getvotelink(); //launch just once
			return $linksVote . $content . $linksVote;
			}
		  else return $content; //nothing expected
		}
	  else return ($content); //nothing expected
	}

add_filter('the_content', 'gt_simplevoteme_printvotelink_auto');

function gt_simplevoteme_aftervote()
	{
	$linkPositivo = gt_simplevoteme_getimgvote("good");
	$linkNegativo = gt_simplevoteme_getimgvote("bad");
	$linkNeutral = gt_simplevoteme_getimgvote("neutral");
	}

/** Ajax **/

function gt_simplevoteme_addvote()
	{
	$results = '';
	global $wpdb;
	$post_ID = $_POST['postid'];
	$user_ID = $_POST['userid'];
	if (!empty($_SERVER['HTTP_CLIENT_IP']))
		{
		$user_IP = $_SERVER['HTTP_CLIENT_IP'];
		}
	elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR']))
		{
		$user_IP = $_SERVER['HTTP_X_FORWARDED_FOR'];
		}
	  else
		{
		$user_IP = $_SERVER['REMOTE_ADDR'];
		}

	$type = $_POST['tipo'];
	$votes = get_post_meta($post_ID, '_simplevotemevotes', true) != "" ? get_post_meta($post_ID, '_simplevotemevotes', true) : array(
		'positives' => array() ,
		'negatives' => array() ,
		'neutrals' => array() ,
		'timestamp' => array()
	);
	$ipDate = get_post_meta($post_ID, '_simplevotedate', true) != "" ? get_post_meta($post_ID, '_simplevotedate', true) : date("Y-m-d");
	$ipVotes = get_post_meta($post_ID, '_simplevoteIP', true) != "" ? get_post_meta($post_ID, '_simplevoteIP', true) : array(
		'positives' => array()
	);
	$simplevotetimestamp = get_post_meta($post_ID, '_simplevotetimestamp', true) != "" ? get_post_meta($post_ID, '_simplevotetimestamp', true) : time();
	if ($ipDate != date("Y-m-d"))
		{
		$ipVotes = array(
			'positives' => array()
		);
		$ipDate = date("Y-m-d");
		update_post_meta($post_ID, '_simplevotedate', $votes);
		}

	switch ($type)
		{
	case 0:
		$votes['neutrals'][] = $user_ID;
		break;

	case 1:
		$votes['positives'][] = $user_ID;
		$votes['timestamp'][] = time();
		if (!filter_var($user_IP, FILTER_VALIDATE_IP) === false)
			{
			$ipVotes['positives'][] = $user_IP;
			}

		break;

	case 2:
		$votes['negatives'][] = $user_ID;
		break;
		}

	update_post_meta($post_ID, '_simplevotemevotes', $votes);
	update_post_meta($post_ID, '_simplevoteIP', $ipVotes);
	update_post_meta($post_ID, '_simplevotetimestamp', $simplevotetimestamp);
	$result = gt_simplevoteme_getvotelink(1, 'h', $post_ID);

	// Return the String

	die($result);
	}

// creating Ajax call for WordPress

add_action('wp_ajax_nopriv_simplevoteme_addvote', 'gt_simplevoteme_addvote');
add_action('wp_ajax_simplevoteme_addvote', 'gt_simplevoteme_addvote');

function gt_simplevoteme_addvote2()
	{
	$results = '';
	global $wpdb;
	$post_ID = $_POST['postid'];
	$user_ID = $_POST['userid'];
	if (!empty($_SERVER['HTTP_CLIENT_IP']))
		{
		$user_IP = $_SERVER['HTTP_CLIENT_IP'];
		}
	elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR']))
		{
		$user_IP = $_SERVER['HTTP_X_FORWARDED_FOR'];
		}
	  else
		{
		$user_IP = $_SERVER['REMOTE_ADDR'];
		}

	$type = $_POST['tipo'];
	$votes = get_post_meta($post_ID, '_simplevotemevotes', true) != "" ? get_post_meta($post_ID, '_simplevotemevotes', true) : array(
		'positives' => array() ,
		'negatives' => array() ,
		'neutrals' => array()
	);
	$ipDate = get_post_meta($post_ID, '_simplevotedate', true) != "" ? get_post_meta($post_ID, '_simplevotedate', true) : date("Y-m-d");
	$ipVotes = get_post_meta($post_ID, '_simplevoteIP', true) != "" ? get_post_meta($post_ID, '_simplevoteIP', true) : array(
		'positives' => array()
	);
	if ($ipDate != date("Y-m-d"))
		{
		$ipVotes = array(
			'positives' => array()
		);
		$ipDate = date("Y-m-d");
		update_post_meta($post_ID, '_simplevotedate', $votes);
		}

	switch ($type)
		{
	case 0:
		$votes['neutrals'][] = $user_ID;
		break;

	case 1:
		$votes['positives'][] = $user_ID;
		if (!filter_var($user_IP, FILTER_VALIDATE_IP) === false)
			{
			$ipVotes['positives'][] = $user_IP;
			}

		break;

	case 2:
		$votes['negatives'][] = $user_ID;
		break;
		}

	update_post_meta($post_ID, '_simplevotemevotes', $votes);
	update_post_meta($post_ID, '_simplevoteIP', $ipVotes);
	$result = gt_simplevoteme_getvotelink(1, 'h', $post_ID);
	$votes = get_post_meta($post_ID, '_simplevotemevotes', true);

	// $sum = 0;
	// foreach($votes['positives'] as $key => $vote) {
	//     $sum += $vote;
	// }
	// echo $sum;
	// Return the String
	// die();
	// Return the String

	die($result);
	}

// creating Ajax call for WordPress

add_action('wp_ajax_nopriv_simplevoteme_addvote2', 'gt_simplevoteme_addvote2');
add_action('wp_ajax_simplevoteme_addvote2', 'gt_simplevoteme_addvote2');
